name: Packer build and deploy AMI

on: 
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  integration-test:
    runs-on: ubuntu-latest

    env:
      DB: ${{secrets.DB}}
      HOST: ${{secrets.HOST}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_USERNAME: ${{secrets.DB_USERNAME}}
      DB_NAME: ${{secrets.DB_NAME}}
      DB_DIALECT: ${{secrets.DB_DIALECT}}
      DB_POOL_MIN: ${{secrets.DB_POOL_MIN}}
      DB_POOL_MAX: ${{secrets.DB_POOL_MAX}}
      DB_POOL_ACQUIRE: ${{secrets.DB_POOL_ACQUIRE}}
      DB_POOL_IDLE: ${{secrets.DB_POOL_IDLE}}
      APP_PORT: ${{secrets.APP_PORT}}
      USERS_CSV_PATH: ${{secrets.USERS_CSV_PATH}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop

      - name: Install MySQL
        run: |
          sudo apt-get update -qy
          sudo apt-get install -qy mysql-server
          
      - name: Start MySQL Service
        run: sudo service mysql start
          
      - name: Change MySQL Root Password
        run: |
         mysql -u $DB_USERNAME -proot -e "ALTER USER '$DB_USERNAME'@'$HOST' IDENTIFIED BY '$DB_PASSWORD'; FLUSH PRIVILEGES;"
         
      - name: Create Database
        run: |
          mysql -h $HOST -u $DB_USERNAME -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB"
          
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  create-artifact-and-build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install tree
        run: sudo apt-get install tree

      - name: Show current directory and file structure
        run: |
          pwd
          tree
          
      - name: Create .env file  
        run: |
          echo "# App configurations" > .env
          echo "APP_PORT=${{secrets.APP_PORT}}" >> .env
          echo "" >> .env
          echo "# DB Configurations" >> .env
          echo "DB=${{secrets.DB}}" >> .env
          echo "HOST=${{vars.HOST_DEBIAN}}" >> .env
          echo "DB_USERNAME=${{secrets.DB_USERNAME}}" >> .env
          echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
          echo "DB_DIALECT=${{secrets.DB_DIALECT}}" >> .env
          echo "DB_POOL_MIN=${{secrets.DB_POOL_MIN}}" >> .env
          echo "DB_POOL_MAX=${{secrets.DB_POOL_MAX}}" >> .env
          echo "DB_POOL_ACQUIRE=${{secrets.DB_POOL_ACQUIRE}}" >> .env
          echo "DB_POOL_IDLE=${{secrets.DB_POOL_IDLE}}" >> .env
          echo "" >> .env
          echo "# SNS" >> .env
          echo "SNS_TOPIC_ARN=" >> .env
          echo "" >> .env
          echo "# AWS_REGION" >> .env
          echo "AWS_REGION=" >> .env
          echo "" >> .env
          echo "# Files" >> .env
          echo "USERS_CSV_PATH=${{secrets.USERS_CSV_PATH}}" >> .env
          cat .env
            
      - name: Show current directory and file structure
        run: |
          pwd
          tree
      - name: Create artifact ZIP
        run: zip -r webapp.zip .

      - name: Show current directory and file structure
        run: |
          pwd
          tree
      - name: Create variables.json
        run: |
          echo '{
            "aws_region": "${{vars.AWS_REGION}}",
            "source_ami": "${{vars.SOURCE_AMI}}",
            "ssh_username": "${{vars.SSH_USERNAME}}",
            "subnet_id": "${{vars.SUBNET_ID}}",
            "artifact_path": "./webapp.zip",
            "ami_users": ["${{secrets.AWS_DEMO_USER_ID}}"]
          }' > variables.json
          
      - name: Show current directory and file structure
        run: |
          pwd
          tree
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main

      - name: Configure AWS Credentials for dev acc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
          aws-region: ${{vars.AWS_REGION}}

      - name: Run `packer init`
        run: "packer init './packer/ami.us-east-1.pkr.hcl'"

      # - name: Run Packer Build
      #   run: "packer build -var-file=variables.json './packer/ami.us-east-1.pkr.hcl'"

      - name: Reconfigure AWS Credentials for demo acc
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_DEMO_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_DEMO_SECRET_ACCESS_KEY}}
          aws-region: ${{vars.AWS_REGION}}
      
      - name: Get latest AMI from "dev" account
        id: get-latest-ami
        run: |
          latest_ami=$(aws ec2 describe-images \
                          --owners ${{secrets.AWS_DEV_USER_ID}} \
                          --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
                          --region ${{vars.AWS_REGION}})
          echo "Latest AMI ID: $latest_ami"

      - name: Get latest Launch Template ID
        id: get-latest-launch-template-id
        run: |
          latest_launch_template=$(aws ec2 describe-launch-templates \
                                    --filters "Name=launch-template-name,Values=Webapp_Launch_Template-*" \
                                    --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateId' \
                                    --region ${{vars.AWS_REGION}})
          echo "Latest Launch Template ID: $latest_launch_template"
      
      - name: Extract Launch Template ID without quotes
        id: extract-launch-template-id
        run: |
          latest_launch_template=$(echo ${{ steps.get-latest-launch-template-id.outputs.latest_launch_template }} | tr -d '"')
          echo "Latest Launch Template ID without quotes: $latest_launch_template"
      
      - name: Get the latest Launch Template version
        id: get-latest-launch-template-version
        run: |
          latest_version=$(aws ec2 describe-launch-template-versions \
                             --launch-template-id ${{ steps.extract-launch-template-id.outputs.latest_launch_template }} \
                             --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' \
                             --region ${{vars.AWS_REGION}})
          echo "Latest Launch Template Version: $latest_version"
      
      - name: Create a new Launch Template version with the updated AMI ID
        id: create-new-launch-template-version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-id ${{ steps.extract-launch-template-id.outputs.latest_launch_template }} \
            --launch-template-data "{\"ImageId\":${{ steps.get-latest-ami.outputs.latest_ami }}} \
            --source-version ${{ steps.get-latest-launch-template-version.outputs.latest_version }} \
            --region ${{vars.AWS_REGION}}
      
      - name: Get the latest Auto Scaling Group name matching the pattern
        id: get-latest-auto-scaling-group
        run: |
          autoscaling_group_name=$(aws autoscaling describe-auto-scaling-groups \
                                     --query "AutoScalingGroups[?contains(AutoScalingGroupName, 'autoscaling-group-')].{Name: AutoScalingGroupName} | sort_by(@, &Name)[-1].Name" \
                                     --region ${{vars.AWS_REGION}})
          echo "Latest Auto Scaling Group Name: $autoscaling_group_name"
      
      - name: Extract Auto Scaling Group name without quotes
        id: extract-auto-scaling-group-name
        run: |
          autoscaling_group_name=$(echo "${{ steps.get-latest-auto-scaling-group.outputs.autoscaling_group_name }}" | tr -d '"')
          echo "Latest Auto Scaling Group Name without quotes: $autoscaling_group_name"
      
      - name: Trigger instance refresh and capture the ID
        id: trigger-instance-refresh
        run: |
          refresh_id=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ steps.extract-auto-scaling-group-name.outputs.autoscaling_group_name }} --query 'InstanceRefreshId' --output text)
      
      - name: Check instance refresh status
        id: check-instance-refresh-status
        run: |
          while true; do
              status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ steps.extract-auto-scaling-group-name.outputs.autoscaling_group_name }} --instance-refresh-ids ${{ steps.trigger-instance-refresh.outputs.refresh_id }} --query 'InstanceRefreshes[0].Status' --output text)
              echo "Instance Refresh Status: $status"
              if [[ "$status" == "Successful" || "$status" == "Failed" ]]; then
                  break
              else
                  sleep 30
              fi
          done
